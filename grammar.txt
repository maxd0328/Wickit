% Official Wickit Language Grammar

INCLUDE "symbol/locator.h";
INCLUDE "ast/general/translation.h";
INCLUDE "ast/general/declset.h";
INCLUDE "ast/general/import.h";
USING "wckt::ast";

START #TranslationUnit;

% General Rules ----------------------------------------------------------------------------------------------------------------------------------

#TranslationUnit -> #ImportStatement #TranslationUnit;									{ $1P->insertImportStatement($0); return $1; }
#TranslationUnit -> #DeclarationSet;													{ return $NEW($0); }

#ImportStatement -> $KEYW_IMPORT #StaticSymbol #ImportSuffix $DELIM_SEMICOLON;			{ return $NEW($1->get(), $2 != $NULL); }
#ImportStatement -> $KEYW_IMPORT $ERROR $DELIM_SEMICOLON;
#ImportSuffix -> $DELIM_DOT $OPERATOR_MUL;												{ return $NEW(); }
#ImportSuffix -> ;																		{ return $NULL; }

#DeclarationSet -> #DeclarationSet #Declaration;										{ return $NEW(); }
#DeclarationSet -> #Declaration;
#DeclarationSet -> ;

TYPEOF #ImportSuffix "DummyObject";

% Static Declarations ----------------------------------------------------------------------------------------------------------------------------

#Declaration -> #NamespaceDeclaration;
#Declaration -> #TypeDeclaration;

#NamespaceDeclaration -> $KEYW_NAMESPACE #Identifier $DELIM_LBRACE
							#DeclarationSet $DELIM_RBRACE;

#TypeDeclaration -> $KEYW_TYPE #Identifier #GenericTypeDeclarator
							$KEYW_AS #Type $DELIM_SEMICOLON;

% Type Expressions -------------------------------------------------------------------------------------------------------------------------------

#Type -> #TypeUnion;

#TypeUnion -> #TypeIntersection $OPERATOR_OR #TypeUnion;
#TypeUnion -> #TypeIntersection;

#TypeIntersection -> #FunctionType $OPERATOR_AND #TypeIntersection;
#TypeIntersection -> #FunctionType;

#FunctionType -> #GenericTypeDeclarator $DELIM_LPAREN #OptionalTypeList
						$DELIM_RPAREN $OPERATOR_ARROW #ReturnPostfixType;
#FunctionType -> #PostfixType $OPERATOR_ARROW #ReturnPostfixType;
#FunctionType -> #PostfixType;

#ReturnPostfixType -> #PostfixType;
#ReturnPostfixType -> $KEYW_VOID;

#PostfixType -> #UnitType $DELIM_LBRACKET $DELIM_RBRACKET;
#PostfixType -> #UnitType $OPERATOR_OPTIONAL;
#PostfixType -> #UnitType;

#UnitType -> #StaticSymbol #GenericTypeSpecifier;
#UnitType -> $DELIM_LPAREN #Type $DELIM_RPAREN;
#UnitType -> $DELIM_LPAREN $ERROR $DELIM_RPAREN;

#GenericTypeDeclarator -> $OPERATOR_LESS #GenericTypeDeclaratorImpl $OPERATOR_GREATER;
#GenericTypeDeclarator -> ;
#GenericTypeDeclaratorImpl -> #GenericType $DELIM_COMMA #GenericTypeDeclaratorImpl;
#GenericTypeDeclaratorImpl -> #GenericType;

#GenericType -> #Identifier;
#GenericType -> #Identifier $KEYW_SATISFIES #Type;

#GenericTypeSpecifier -> $OPERATOR_LESS #OptionalTypeList $OPERATOR_GREATER
#GenericTypeSpecifier -> ;

% Miscellanious Rules ----------------------------------------------------------------------------------------------------------------------------

#StaticSymbol -> #StaticSymbol $DELIM_DOT #Identifier;									{ return $NEW($0->get() + $2->get()); }
#StaticSymbol -> #Identifier;															{ return $NEW($0->get()); }

#Identifier -> $IDENTIFIER;																{ return $NEW($0->get().getValue()); }
#Identifier -> $NO_NAME;																{ return $NEW("---"); }

#TypeList -> #Type $DELIM_COMMA #TypeList;
#TypeList -> #Type;
#OptionalTypeList -> #TypeList;
#OptionalTypeList -> ;

TYPEOF #StaticSymbol "ContainerObject<sym::Locator>";
TYPEOF #Identifier "ContainerObject<std::string>";
